h2. @SxArray<T>@

p1. The array container @SxArray<T>@ has been provided to allow contiguous
    memory buffer for different data types. This class allows constant access
    time of individual elements by using integer indices. In cases where the
    size of data is not known beforehand, @SxList@ object can be used to read
    in the data and the array is initialized with the @SxList@ object.

p1. In the following the common applications of @SxArray<T>@ are demonstrated
    by means of simple data types, such as @int@ or @SxString@. Therefore,
    include the following header files:

{{{cpp(sxarray)
#include <SxArray.h>
#include <SxString.h>
#include <SxAlg.h>
}}}

p1. And instantiate arrays:

{{{cpp(sxarray.fixture)
SxArray<SxString> myStrArray(5);
SxArray<int> myIntArray(5);
SxArray<double> myDoubleArray;
myDoubleArray.resize (5);
}}}

h3. Initialize/Update elements, @operator()@ / @Iterator@ / @set()@

p1. The array elements can easily be populated by using the parenthesis
    operator @()@, the @Iterator@ or the @set()@ function:

{{{cpp(sxarray.fixture)
myStrArray(0) = "one";
myStrArray(1) = "two";
myStrArray(2) = "three";
myStrArray(3) = "four";
myStrArray(4) = "five";
int num = 10;
for (auto itr = myIntArray.begin (); itr != myIntArray.end (); ++itr) {
   *itr = num;
   num += 10;
}
myDoubleArray.set (5.0);
}}}

p1. For debugging purposes the array objects can be redirected to
    @cout@ or accessed as individual elements using @()@ operator:

{{{cpp(sxarray.fixture.update)
cout << myStrArray(3) << endl;
cout << myStrArray << endl;
cout << myIntArray << endl;
cout << myDoubleArray << endl;
}}}

p1. Which yields,

{{{expect(stdout,sxarray.fixture.update)
four
[one, two, three, four, five];
}}}

p1. and

{{{expect(stdout,sxarray.fixture.update)
[10, 20, 30, 40, 50];
}}}

p1. and

{{{expect(stdout,sxarray.fixture.update)
[5, 5, 5, 5, 5];
}}}

h3. Initialize using @SxList@

p1. An @SxArray@ object can be initialized by @SxList@ object. It can be
    useful in cases where total size of data is unknown, so @SxList@ can be
    used to read in the data and later converted to @SxArray@ object.
    Similarly, an @SxArray@ object can be converted to an @SxList@ object
    by using @toList@ function.

{{{cpp(sxarray.arraysLists_fixture)
SxList<int> tmpList;
int num=10;
for (int i = 0; i < 5; i++) {
   tmpList.append (num);
   num += 10;
}
SxArray<int> intArray (tmpList);
cout << intArray << endl;
intArray(2) = 15;
SxList<int> lst = intArray.toList ();
cout << lst << endl;
}}} 

p1. The above code results in the following output:

{{{expect(stdout,sxarray.arraysLists_fixture)
[10, 20, 30, 40, 50];
0: 10
1: 20
2: 15
3: 40
4: 50
}}}

h3. Initialize using @std::intializer\_list@

p1. The @SxArray@ object can also be populated with an @std::initializer\_list@
    object. The following code snippet shows example usage of this constructor:

{{{cpp(sxarray.initList)
SxArray<int> numArray({1,10,30,15,2});
cout << numArray << std::endl;
}}}

p1. which results in the following output:

{{{expect(stdout,sxarray.initList)
[1, 10, 30, 15, 2];
}}}

h3. Initialize using @SxList<SxArray>@

p1. An @SxArray@ object can be initialized by @SxList<SxArray>@ object.
    It can be useful in cases when several SxArray should be joined into
    one single SxArray object.

{{{cpp(sxarray.listArrays_join)
SxArray<char> ar1 ({'a', 'b', 'c', 'd'});
SxArray<char> ar2 ({'1', '2', '3', '4', '5'});
SxArray<char> ar3 ({'x', 'y', 'z'});
SxList<SxArray<char> > list;
list << ar1 << ar2 <<ar3;
SxArray<char> result = SxArray<char>::join (list);
cout << result << endl;
}}}

p1. The above code results in the following output:

{{{expect(stdout,sxarray.listArrays_join)
[a, b, c, d, 1, 2, 3, 4, 5, x, y, z];
}}}

h3. Append and prepend elements, @append()@ / @prepend()@

p1. The @append()@ function allows the @SxArray@ object to append an element(s)
    at the end of the array, while automatically increasing the size.
    The @prepend()@ function allows to add an element(s) at the beginning of
    the array with automatic increase in size. By using the
    @myDoubleArray@ object from above:

{{{cpp(sxarray.fixture.ap)
myDoubleArray.append (2000, 3);
myDoubleArray.prepend (1000);
cout << myDoubleArray << endl;
}}}

p1. Which results in,

{{{expect(stdout,sxarray.fixture.ap)
[1000, 5, 5, 5, 5, 5, 2000, 2000, 2000];
}}}

h3. Searching within elements, @contains()@ / @findPos()@

p1. In order to check whether the @SxArray@ object contains a certain element,
    the @contains()@ function can be used and to find out the index of a
    given element in the @SxArray@ object the @findPos()@ function
    can be called. By using the @myIntArray@ object from above:

{{{cpp(sxarray.fixture.search)
if (myIntArray.contains (15)) {
   cout << "element 15 exists in array" << endl;
} else {
   cout << "element 15 does not exist" << endl;
}
int pos = myIntArray.findPos (20);
if(pos == -1) {
   cout << "element 20 does not exist" << endl;
} else {
   cout << myIntArray(pos) << endl;
}
}}}

p1. Which yields,

{{{expect(stdout,sxarray.fixture.search)
element 15 does not exist
20
}}}

h3. Sorting of elements, @sort()@ / @qsort()@ / @sortByIdx()@ / @getSortIdx()@

p1. The array elements can be sorted in ascending order by using
    the @sort()@ or @qsort()@ function. Similarly, to sort in descending
    order @sortDesc()@ or @qsortDesc()@ function can be used.
    The @sort()@/@sortDesc()@ function uses bubble sort algorithm and
    @qsort()@/@qsortDesc()@ function uses quick sort algorithm to sort
    the elements. The @sortByIdx()@ function can be used to sort the elements
    in the order of indices provided as an @SxArray@ object. Also,
    the @getSortIdx()@ function returns an array of indices in sorted order.
    Consider an array containing integers in random order

{{{cpp(sxarray.sort_fixture)
SxArray<int> array(5);
array(0) = 40;
array(1) = 50;
array(2) = 30;
array(3) = 10;
array(4) = 20;
}}}

p1. The call to @getSortIdx()@ returns the sorted order of indices,

{{{cpp(sxarray.sort_fixture.getSortIdx)
cout << array.getSortIdx () << endl;
}}}

{{{expect(stdout,sxarray.sort_fixture.getSortIdx)
[3, 4, 2, 0, 1];
}}}

p1. By using the returned indices @SxArray@ object can be sorted as

{{{cpp(sxarray.sort_fixture.sortByIdx)
array.sortByIdx (array.getSortIdx ());
cout << array << endl;
}}}

p1. Which results in sorted array

{{{expect(stdout,sxarray.sort_fixture.sortByIdx)
[10, 20, 30, 40, 50];
}}}

p1. Alternatively, @sort()@ function can also be used to sort elements in
    ascending order

{{{cpp(sxarray.sort_fixture.sort)
array.sort ();
cout << array << endl;
}}}

p1. Which results the same sorted array.

{{{expect(stdout,sxarray.sort_fixture.sort)
[10, 20, 30, 40, 50];
}}}

p1. This function also allows the option to provide custom compare
    function. The compare function must receive two parameters of the
    corresponding iterator type and returns an integer value. It returns -1,
    if element pointed to by the first iterator is less than the element
    pointed to by the second iterator. It returns 0, if both elements are
    equal and returns 1 if first element is greater than second.

{{{cpp(sxarray.sort_fixture.sortLambda)
array.sort ([](const auto &itA, const auto &itB)->int 
            {  if (*itA < *itB)        return -1;
               else if (*itA == *itB)  return  0;
               else                    return  1;
            });
cout << array << endl;
}}}

p1. The above code results in the following output:

{{{expect(stdout,sxarray.sort_fixture.sortLambda)
[10, 20, 30, 40, 50];
}}}

p1. In order to sort in descending order, @sortDesc()@ function can be
    used as follows:

{{{cpp(sxarray.sort_fixture.sortDesc)
array.sortDesc ();
cout << array << endl;
}}}

p1. Resulting in,

{{{expect(stdout,sxarray.sort_fixture.sortDesc)
[50, 40, 30, 20, 10];
}}}

p1. Or for custom comparator,

{{{cpp(sxarray.sort_fixture.sortDescLambda)
array.sortDesc ([](const auto &itA, const auto &itB)->int 
                {  if (*itA < *itB)        return -1;
                   else if (*itA == *itB)  return  0;
                   else                    return  1;
                });
cout << array << endl;
}}}

p1. Which results in the following sorted array:

{{{expect(stdout,sxarray.sort_fixture.sortDescLambda)
[50, 40, 30, 20, 10];
}}}

p1. In order to sort elements using quick sort, @qsort()@ and @qsortDesc()@
    functions can be used. Using the @array@ from above

{{{cpp(sxarray.sort_fixture.qsort)
array.qsort ();
cout << array << endl;
}}}

p1. Which results in,

{{{expect(stdout,sxarray.sort_fixture.qsort)
[10, 20, 30, 40, 50];
}}}

p1. This function also allows the option to provide custom compare function.
    The compare function must receive two parameters of the corresponding
    iterator type and returns an integer value. It returns -1, if element
    pointed to by the first iterator is less than the element pointed to by
    the second iterator. It returns 0, if both elements are equal and returns
    1 if first element is greater than second.

{{{cpp(sxarray.sort_fixture.qsortLambda)
array.qsort ([](const auto &itA, const auto &itB)->int 
             {  if (*itA < *itB)        return -1;
                else if (*itA == *itB)  return  0;
                else                    return  1;
             });
cout << array << endl;
}}}

p1. The above code yields the following output:

{{{expect(stdout,sxarray.sort_fixture.qsortLambda)
[10, 20, 30, 40, 50];
}}}

p1. In the same way, to sort in descending order using quick sort @qsortDesc()@
    can be used as follows

{{{cpp(sxarray.sort_fixture.qsortDesc)
array.qsortDesc ();
cout << array << endl;
}}}

p1. Which yields,

{{{expect(stdout,sxarray.sort_fixture.qsortDesc)
[50, 40, 30, 20, 10];
}}}

p1. Or to use custom compare function,

{{{cpp(sxarray.sort_fixture.qsortDescLambda)
array.qsortDesc ([](const auto &itA, const auto &itB)->int 
                 {  if (*itA < *itB)        return -1;
                    else if (*itA == *itB)  return  0;
                    else                    return  1;
                 });
cout << array << endl;
}}}

p1. Which yields,

{{{expect(stdout,sxarray.sort_fixture.qsortDescLambda)
[50, 40, 30, 20, 10];
}}}

h3. Sorting of elements by iterators, @sx::sort()@ / @sx::qsort()@

p1. An @SxArray@ object can also be sorted by using @sort()@ or @qsort()@
    functions that require iterators as parameters. The @sort()@/@qsort()@
    functions require the iterator pointing to the first element to be
    sorted and the iterator pointing to the last element to be sorted.
    Consider the @array@ object from above

{{{cpp(sxarray.sort_fixture.sortIt)
sx::sort (array.begin (), array.fromLast ());
}}}

p1. The above code results in the following output:

{{{expect(stdout,sxarray.sort_fixture.sortIt)
[10, 20, 30, 40, 50];
}}}

p1. This function also allows the option to provide custom compare function.
    The compare function must receive two parameters of the corresponding
    iterator type and returns an integer value. It returns -1, if element
    pointed to by the first iterator is less than the element pointed to by the
    second iterator. It returns 0, if both elements are equal and returns 1
    if first element is greater than second.

{{{cpp(sxarray.sort_fixture.sortItLambda)
sx::sort (array.begin (), array.fromLast (), 
          [](const auto &itA, const auto &itB)->int 
            {  if (*itA < *itB)        return -1;
               else if (*itA == *itB)  return  0;
               else                    return  1;
            });
cout << array << endl;
}}}

{{{expect(stdout,sxarray.sort_fixture.sortItLambda)
[10, 20, 30, 40, 50];
}}}

p1. In order to sort elements in descending order using bubble sort, the order
    of parameters can be reversed.

{{{cpp(sxarray.sort_fixture.sortDescIt)
sx::sort (array.fromLast (), array.begin ());
cout << array << endl;
}}}

p1. which results in

{{{expect(stdout,sxarray.sort_fixture.sortDescIt)
[50, 40, 30, 20, 10];
}}}

p1. Or for custom comparator,

{{{cpp(sxarray.sort_fixture.sortDescItLambda)
sx::sort (array.fromLast (), array.begin (), 
          [](const auto &itA, const auto &itB)->int 
            {  if (*itA < *itB)        return -1;
               else if (*itA == *itB)  return  0;
               else                    return  1;
            });
cout << array << endl;
}}}

p1. Which results in the same sorted array:

{{{expect(stdout,sxarray.sort_fixture.sortDescItLambda)
[50, 40, 30, 20, 10];
}}}

p1. The @qsort()@ function can be used to sort array elements by using
    quick sort. By using the @array@ object from above:

{{{cpp(sxarray.sort_fixture.qsortIt)
sx::qsort (array.begin (), array.fromLast ());
cout << array << endl;
}}}

p1. Which yields the same sorted elements:

{{{expect(stdout,sxarray.sort_fixture.qsortIt)
[10, 20, 30, 40, 50];
}}}

p1. This function also allows the option to provide custom compare function.
    The compare function must receive two parameters of the corresponding
    iterator type and returns an integer value. It returns -1, if element
    pointed to by the first iterator is less than the element pointed to by the
    second iterator. It returns 0, if both elements are equal and returns 1
    if first element is greater than second.

{{{cpp(sxarray.sort_fixture.qsortItLambda)
sx::qsort (array.begin (), array.fromLast (), 
           [](const auto &itA, const auto &itB)->int 
             {  if (*itA < *itB)        return -1;
                else if (*itA == *itB)  return  0;
                else                    return  1;
             });
cout << array << endl;
}}}

p1. The above code yields the following output:

{{{expect(stdout,sxarray.sort_fixture.qsortItLambda)
[10, 20, 30, 40, 50];
}}}

p1. In order to sort the elements in descending order using quick sort,
    the order of the parameters can be switched as follows:

{{{cpp(sxarray.sort_fixture.qsortDescIt)
sx::qsort (array.fromLast (), array.begin ());
cout << array << endl;
}}}

p1. Which results in,

{{{expect(stdout,sxarray.sort_fixture.qsortDescIt)
[50, 40, 30, 20, 10];
}}}

p1. Or to use custom compare function,

{{{cpp(sxarray.sort_fixture.qsortDescItLambda)
sx::qsort (array.fromLast (), array.begin (), 
           [](const auto &itA, const auto &itB)->int 
             {  if (*itA < *itB)        return -1;
                else if (*itA == *itB)  return  0;
                else                    return  1;
             });
cout << array << endl;
}}}

p1. Which results in the same sorted array:

{{{expect(stdout,sxarray.sort_fixture.qsortDescItLambda)
[50, 40, 30, 20, 10];
}}}


h3. Memory management, @resize()@ / @setChunkSize@

p1. The @resize()@ function allows to change the size of the @SxArray@ object.
    If the passed parameter is set to 'true' then the elements of the array
    will be retained. The default value is 'false', which would erase the elements.

{{{cpp(sxarray.resize_fixture)
SxArray<int> myArray (3);
myArray(0) = 3;
myArray(1) = 6;
myArray(2) = 9;
}}}

{{{cpp(sxarray.resize_fixture.resize)
cout << "Before resize:" << myArray << endl;
myArray.resize(4, true);
myArray(3) = 12;
cout << "After resize(4,true):" << myArray << endl;
}}}

p1. The above code yields the following output:

{{{expect(stdout,sxarray.resize_fixture.resize)
Before resize:[3, 6, 9];
After resize(4,true):[3, 6, 9, 12];
}}}

p1. The @setChunkSize()@ function allows the @SxArray@ object to allocate
    a larger chunk of memory then asked by @resize()@ function in order to
    avoid reallocating memory at later increase in size. At the first call
    to @resize()@ after @setChunkSize()@ the @SxArray@ object will
    allocate buffer of size equal to chunk size if the requested size is
    smaller than the chunk size. All later calls to @resize()@ will only
    update the (allowed)size of the buffer, instead of reallocating,
    if requested size is smaller than the chunk size. 

p1. It should be noted that the actual/allowed size still remains equal
    to the one provided in @resize()@ function. In the absence of a large
    enough chunk size, with every increase in size the @SxArray@ object would
    have to allocate a new buffer which can be computationally expensive.
    By using the array object from above:

{{{cpp(sxarray.resize_fixture.chunksize)
myArray(0) = 1;
myArray(1) = 2;
myArray(2) = 3;
myArray.setChunkSize (50);
myArray.resize (6, true);
myArray(3) = 4;
myArray(4) = 5;
myArray(5) = 6;
cout << myArray << endl;
}}}

p1. Which gives,

{{{expect(stdout,sxarray.resize_fixture.chunksize)
[1, 2, 3, 4, 5, 6];
}}}

h3. Remove elements, @removeFirst()@, @removeLast()@, @remove()@

p1. The @removeFirst@ and @removeLast@ functions remove the 1st and
    the last element of the array, respectively. With the @remove@ function
    elements at a specific index can be removed. These functions should be
    avoided due to computational cost.

{{{cpp(sxarray.rm_fixture)
SxArray<int> rmArray(5);
rmArray(0) = 5;
rmArray(1) = 10;
rmArray(2) = 15;
rmArray(3) = 20;
rmArray(4) = 25;
cout << rmArray << endl;
}}}

p1. The above code results in the following output:

{{{expect(stdout,sxarray.rm_fixture)
[5, 10, 15, 20, 25];
}}}

p1. To remove the 3rd, the first and the last element, write:

{{{cpp(sxarray.rm_fixture.rm)
rmArray.remove (2);
rmArray.removeFirst ();
rmArray.removeLast ();
cout << rmArray << endl;
}}}

p1. Which yields,

{{{expect(stdout,sxarray.rm_fixture.rm)
[10, 20];
}}}

p1. The 3rd element '15', 1st element '5' and last element '25' have been removed from @array@.

h3. Remove element using iterator, @removeItem()@

p1. The @removeItem@ function can be used to safely remove an element
    from @SxArray@ object by providing an @Iterator@ pointing to the element.
    The element is removed and a valid @Iterator@ pointing to the next element
    of @SxArray@ is returned. The next element is decided based on the direction
    of provided iterator. If iterator's direction is forward, then next element
    is the one after the removed element in @SxArray@ object, or else if
    iterator's direction is backward, then the next element is previous element
    in @SxArray@ object. By using @rmArray@ object from above:

{{{cpp(sxarray.rm_fixture.itm)
for (auto rmIt = rmArray.begin ();rmIt != rmArray.end (); ++rmIt) {
   if(*rmIt == 15) {
      rmArray.removeItem (&rmIt);
      break;
   }
}
cout << rmArray << endl;
}}}

p1. The above code results in,

{{{expect(stdout,sxarray.rm_fixture.itm)
[5, 10, 20, 25];
}}}

h3. Iterators and lambda functions

p1. The @SxArray<T>@ container class supports iterators. Considering
    the example array object from above:

{{{cpp(sxarray.fixture.iterators)
for (auto it = myStrArray.begin (); it != myStrArray.end (); ++it)  {
   cout << "elem=" << *it << endl;
}
}}}

p1. Which prints the following output:

{{{expect(stdout,sxarray.fixture.iterators)
elem=one
elem=two
elem=three
elem=four
elem=five
}}}

p1. The above example can also be written using lambda functions:

{{{cpp(sxarray.fixture.lambdait)
myStrArray.foreach([](auto it) { cout << "elem=" << *it << endl; });
}}}

p1. Which gives the same output:

{{{expect(stdout,sxarray.fixture.lambdait)
elem=one
elem=two
elem=three
elem=four
elem=five
}}}

h4. Accessing Iterators, @begin()@ / @end()@ and @fromLast()@ / @toFirst()@

p1. The @begin()@ function returns iterator pointing to the first element
    of @SxArray@ object. It is used in conjunction with @end()@ function, which
    returns an iterator pointing to the location one past the last valid
    element in the array. 


.begin() := returns iterator pointing to first valid element in the array.
.end()   := returns iterator pointing to one past the last valid element.

.fromLast() := returns iterator pointing to the last valid element in the array.
.toFirst()  := returns iterator pointing to one before the first valid element.


p1. By using the @array@ object from above:

{{{cpp(sxarray.rm_fixture.beginIt)
for (auto beginIt = rmArray.begin ();beginIt != rmArray.end (); ++beginIt) {
   cout << *beginIt << endl;
}
}}} 

p1. Which yields,

{{{expect(stdout,sxarray.rm_fixture.beginIt)
5
10
15
20
25
}}}

p1. The @fromLast()@ function returns the iterator pointing to the last valid
    element and @toFirst()@ returns the iterator pointing to location before
    the first valid element.

{{{cpp(sxarray.rm_fixture.fromLastIt)
for(auto beginIt = rmArray.fromLast ();beginIt != rmArray.toFirst (); --beginIt) {
   cout << *beginIt << endl;
}
}}}

p1. The above code results in the following output:

{{{expect(stdout,sxarray.rm_fixture.fromLastIt)
25
20
15
10
5
}}}

h4. Setting iterator direction, @isForward()@ / @forward()@ / @backward()@ / @reverse()@

p1. An iterator can have either forward or backward direction. The iterator
    returned by @begin()@ function is by default an forward iterator and the
    iterator returned by @fromLast@ is a backward iterator. The direction can be
    checked by calling @isForward@ function. The @isForward@ returns true if the
    iterator has forward direction and false otherwise. 

{{{cpp(sxarray.rm_fixture.isForward)
auto beginIt = rmArray.begin ();
if (beginIt.isForward () == true)
   cout << "The beginIt is a forward iterator" << endl;
auto lastIt = rmArray.fromLast ();
if (lastIt.isForward () == false)
   cout << "The lastIt is a backward iterator" << endl;
}}}

p1. The above code yields:

{{{expect(stdout,sxarray.rm_fixture.isForward)
The beginIt is a forward iterator
The lastIt is a backward iterator
}}}

p1. The @forward@ function returns a copy of the iterator with it's direction
    set to forward and @backward@ function returns a copy of the calling
    iterator with it's direction set to backward. 

{{{cpp(sxarray.rm_fixture.forwardBackwardIt)
auto beginIt = rmArray.begin ();
if (beginIt.isForward () == true)
   cout << "beginIt's direction is forward" << endl;
beginIt = beginIt.backward ();
if (beginIt.isForward () == false)
   cout << "beginIt's direction is backward" << endl;
beginIt = beginIt.forward ();
if (beginIt.isForward () == true)
   cout << "beginIt's direction is forward" << endl;
}}}

p1. Which prints the following results:

{{{expect(stdout,sxarray.rm_fixture.forwardBackwardIt)
beginIt's direction is forward
beginIt's direction is backward
beginIt's direction is forward
}}}

p1. Similarly, @reverse@ function returns a copy of the calling iterator with
    it's direction reversed.

{{{cpp(sxarray.rm_fixture.reverseIt)
auto lastIt = rmArray.fromLast ();
if (lastIt.isForward () == false)
   cout << "The lastIt's direction is backward" << endl;
lastIt = lastIt.forward ();
if (lastIt.isForward () == true)
   cout << "The lastIt's direction is forward" << endl;
lastIt = lastIt.backward ();
if (lastIt.isForward () == false)
   cout << "The lastIt's direction is backward" << endl;
}}}

p1. The above code gives the following results:

{{{expect(stdout,sxarray.rm_fixture.reverseIt)
The lastIt's direction is backward
The lastIt's direction is forward
The lastIt's direction is backward
}}}

h4. Access Iterator to specific element, @begin()@

p1. The @begin@ function also allows to get an iterator pointing to a specific
    element. It requires the array index of the element and iterator direction
    as parameters. The default value of the @direction@ is forward.

{{{cpp(sxarray.rm_fixture.beginParam)
auto it = rmArray.begin (2, sx::Backward);
if (it.isValid ()) {
if (*it == 15)
   cout << "The returned iterator points to 15" << endl;
if (it.isForward () == false)
   cout << "The returned iterator's direction is backward" << endl;
}
else {
   cout << "The specified index is not valid" << endl;
}
}}}

p1. The above code yields the following output:

{{{expect(stdout,sxarray.rm_fixture.beginParam)
The returned iterator points to 15
The returned iterator's direction is backward
}}}

