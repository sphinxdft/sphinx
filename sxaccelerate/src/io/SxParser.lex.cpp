#line 2 "SxParser.lex.cpp"

#line 4 "SxParser.lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer SxParser__create_buffer
#define yy_delete_buffer SxParser__delete_buffer
#define yy_scan_buffer SxParser__scan_buffer
#define yy_scan_string SxParser__scan_string
#define yy_scan_bytes SxParser__scan_bytes
#define yy_init_buffer SxParser__init_buffer
#define yy_flush_buffer SxParser__flush_buffer
#define yy_load_buffer_state SxParser__load_buffer_state
#define yy_switch_to_buffer SxParser__switch_to_buffer
#define yypush_buffer_state SxParser_push_buffer_state
#define yypop_buffer_state SxParser_pop_buffer_state
#define yyensure_buffer_stack SxParser_ensure_buffer_stack
#define yy_flex_debug SxParser__flex_debug
#define yyin SxParser_in
#define yyleng SxParser_leng
#define yylex SxParser_lex
#define yylineno SxParser_lineno
#define yyout SxParser_out
#define yyrestart SxParser_restart
#define yytext SxParser_text
#define yywrap SxParser_wrap
#define yyalloc SxParser_alloc
#define yyrealloc SxParser_realloc
#define yyfree SxParser_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define SxParser__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer SxParser__create_buffer
#endif

#ifdef yy_delete_buffer
#define SxParser__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer SxParser__delete_buffer
#endif

#ifdef yy_scan_buffer
#define SxParser__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer SxParser__scan_buffer
#endif

#ifdef yy_scan_string
#define SxParser__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string SxParser__scan_string
#endif

#ifdef yy_scan_bytes
#define SxParser__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes SxParser__scan_bytes
#endif

#ifdef yy_init_buffer
#define SxParser__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer SxParser__init_buffer
#endif

#ifdef yy_flush_buffer
#define SxParser__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer SxParser__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define SxParser__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state SxParser__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define SxParser__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer SxParser__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define SxParser_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state SxParser_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define SxParser_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state SxParser_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define SxParser_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack SxParser_ensure_buffer_stack
#endif

#ifdef yylex
#define SxParser_lex_ALREADY_DEFINED
#else
#define yylex SxParser_lex
#endif

#ifdef yyrestart
#define SxParser_restart_ALREADY_DEFINED
#else
#define yyrestart SxParser_restart
#endif

#ifdef yylex_init
#define SxParser_lex_init_ALREADY_DEFINED
#else
#define yylex_init SxParser_lex_init
#endif

#ifdef yylex_init_extra
#define SxParser_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra SxParser_lex_init_extra
#endif

#ifdef yylex_destroy
#define SxParser_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy SxParser_lex_destroy
#endif

#ifdef yyget_debug
#define SxParser_get_debug_ALREADY_DEFINED
#else
#define yyget_debug SxParser_get_debug
#endif

#ifdef yyset_debug
#define SxParser_set_debug_ALREADY_DEFINED
#else
#define yyset_debug SxParser_set_debug
#endif

#ifdef yyget_extra
#define SxParser_get_extra_ALREADY_DEFINED
#else
#define yyget_extra SxParser_get_extra
#endif

#ifdef yyset_extra
#define SxParser_set_extra_ALREADY_DEFINED
#else
#define yyset_extra SxParser_set_extra
#endif

#ifdef yyget_in
#define SxParser_get_in_ALREADY_DEFINED
#else
#define yyget_in SxParser_get_in
#endif

#ifdef yyset_in
#define SxParser_set_in_ALREADY_DEFINED
#else
#define yyset_in SxParser_set_in
#endif

#ifdef yyget_out
#define SxParser_get_out_ALREADY_DEFINED
#else
#define yyget_out SxParser_get_out
#endif

#ifdef yyset_out
#define SxParser_set_out_ALREADY_DEFINED
#else
#define yyset_out SxParser_set_out
#endif

#ifdef yyget_leng
#define SxParser_get_leng_ALREADY_DEFINED
#else
#define yyget_leng SxParser_get_leng
#endif

#ifdef yyget_text
#define SxParser_get_text_ALREADY_DEFINED
#else
#define yyget_text SxParser_get_text
#endif

#ifdef yyget_lineno
#define SxParser_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno SxParser_get_lineno
#endif

#ifdef yyset_lineno
#define SxParser_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno SxParser_set_lineno
#endif

#ifdef yywrap
#define SxParser_wrap_ALREADY_DEFINED
#else
#define yywrap SxParser_wrap
#endif

#ifdef yyalloc
#define SxParser_alloc_ALREADY_DEFINED
#else
#define yyalloc SxParser_alloc
#endif

#ifdef yyrealloc
#define SxParser_realloc_ALREADY_DEFINED
#else
#define yyrealloc SxParser_realloc
#endif

#ifdef yyfree
#define SxParser_free_ALREADY_DEFINED
#else
#define yyfree SxParser_free
#endif

#ifdef yytext
#define SxParser_text_ALREADY_DEFINED
#else
#define yytext SxParser_text
#endif

#ifdef yyleng
#define SxParser_leng_ALREADY_DEFINED
#else
#define yyleng SxParser_leng
#endif

#ifdef yyin
#define SxParser_in_ALREADY_DEFINED
#else
#define yyin SxParser_in
#endif

#ifdef yyout
#define SxParser_out_ALREADY_DEFINED
#else
#define yyout SxParser_out
#endif

#ifdef yy_flex_debug
#define SxParser__flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug SxParser__flex_debug
#endif

#ifdef yylineno
#define SxParser_lineno_ALREADY_DEFINED
#else
#define yylineno SxParser_lineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 41
#define YY_END_OF_BUFFER 42
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[184] =
    {   0,
        1,    1,   42,   40,    1,    2,   40,   40,   21,   40,
       12,   13,    9,    7,   17,    8,    3,   10,    3,   18,
       22,   16,   40,   20,   14,   15,   11,   20,   20,   20,
       20,   20,   20,   20,    6,   28,    1,    2,    0,    0,
       27,    0,   26,    0,    5,   20,    3,   19,   20,    4,
        0,   24,    0,    3,    3,    0,    0,   20,   20,   20,
       20,   20,   20,   20,    6,    0,    3,    3,    0,   25,
        0,    0,   39,   20,   20,   20,   20,   20,   20,   20,
       23,    0,    0,   20,   20,   20,   20,   20,    0,   20,
       20,    0,   20,   20,   20,   20,   20,    0,   20,   20,

       20,   20,   20,    0,    0,   20,   20,    0,   20,   20,
        0,    0,   20,   19,    0,    0,   20,   20,   31,    0,
       20,    0,   20,   20,    0,   29,    0,   33,    0,    0,
        0,   20,    0,   20,    0,   20,   20,    0,    0,    0,
        0,   34,    0,    0,    0,    0,   20,    0,   20,   20,
        0,    0,    0,   32,    0,    0,   20,   20,    0,   35,
        0,   36,    0,   20,   20,    0,   20,    0,   20,    0,
       20,    0,   20,   20,    0,   30,    0,    0,   20,   37,
        0,   38,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    1,    1,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,    1,   22,   23,   23,   23,   23,   24,   23,
       23,   23,   23,   23,   23,   23,   25,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       26,   17,   27,   28,   23,    1,   29,   30,   31,   32,

       33,   34,   35,   23,   36,   23,   23,   37,   38,   39,
       40,   23,   41,   42,   43,   44,   45,   46,   23,   23,
       23,   23,   47,   48,   49,   17,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[51] =
    {   0,
        1,    2,    1,    1,    1,    3,    1,    2,    1,    4,
        5,    6,    5,    7,    5,    8,    5,    9,   10,   11,
       12,    5,    8,    8,    8,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    2,   13,    1,    1
    } ;

static const flex_int16_t yy_base[204] =
    {   0,
        0,    0,  456,  615,  453,  615,   48,  423,  615,  422,
      615,  615,  615,  615,  615,  615,   51,   45,   98,  615,
      405,  615,  401,   54,  615,  615,  615,   56,   17,   26,
       28,   30,   39,   40,  404,  615,  419,  615,   74,  416,
      615,  415,  615,   85,  615,  377,   67,  615,   75,  615,
       79,  615,  413,   93,    0,    0,  108,   77,  374,   54,
       49,   80,   84,   93,  615,  397,   97,  395,  407,  615,
      122,  136,  615,   96,   86,  104,  110,  103,  128,  117,
      615,    0,  146,   68,  122,  113,  112,  120,  157,  132,
      368,  151,  123,  133,  139,  173,  136,  378,  143,  146,

      219,  182,  155,  190,  191,  204,  167,  369,  161,  186,
      215,  238,  284,  240,  241,  237,  261,  270,  615,  262,
      185,  368,  173,  225,  164,  615,  292,  615,  303,  314,
      393,  322,  392,  324,  367,  204,  358,  345,  390,  261,
      350,  615,  374,  286,  354,  307,  365,  365,  274,  220,
      213,  275,  301,  615,  358,  331,  309,  214,  311,  615,
      341,  615,  319,  308,  251,  306,  341,  380,  350,  298,
      317,  352,  234,  369,  280,  615,  249,  196,  375,  615,
      173,  615,  615,  427,  440,  452,  465,   61,  472,  479,
      489,  499,  509,  519,  529,  539,  549,  557,  565,  575,

      584,  592,  603
    } ;

static const flex_int16_t yy_def[204] =
    {   0,
      183,    1,  183,  183,  183,  183,  183,  184,  183,  185,
      183,  183,  183,  183,  183,  183,  186,  183,  186,  183,
      183,  183,  183,  186,  183,  183,  183,  186,   28,   28,
       28,   28,   28,   28,  183,  183,  183,  183,  183,  184,
      183,  185,  183,  183,  183,   28,   19,  183,   28,  183,
      183,  183,  187,   19,   19,  188,  183,   28,   28,   28,
       28,   28,   28,   28,  183,  183,   28,  183,  187,  183,
      188,  183,  183,   28,   28,   28,   28,   28,   28,   28,
      183,  189,  183,   28,   28,   28,   28,   28,  183,   28,
       28,  189,   28,   28,   28,  190,   28,  183,   28,   28,

      191,  192,   28,  193,  193,  190,   28,  183,   28,   28,
      194,  194,  191,  194,  195,  195,  192,  196,  183,  193,
       28,  183,   28,   28,  183,  183,  183,  183,  195,  197,
      198,  196,  199,  200,  183,   28,   28,  197,  201,  198,
      183,  183,  202,  199,  203,  203,  200,  183,   28,   28,
      183,  183,  183,  183,  203,  183,   28,   28,  183,  183,
      183,  183,  183,   28,   28,  183,   28,  183,   28,  183,
       28,  183,   28,   28,  183,  183,  183,  183,   28,  183,
      183,  183,    0,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183
    } ;

static const flex_int16_t yy_nxt[666] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,    4,   20,   21,   22,
        4,   23,   24,   24,   24,   25,   26,   27,   24,   24,
       24,   24,   24,   28,   29,   30,   24,   24,   31,   24,
       24,   32,   33,   24,   24,   34,    4,    4,   35,   36,
       38,   39,   44,   59,   52,   44,   46,   44,   45,   53,
       61,   45,   62,   45,   60,   46,   47,   46,   71,   46,
       48,   63,   64,   48,   49,   48,   38,   39,   46,   46,
       46,   77,   47,   49,   76,   66,   44,   66,   46,   66,
       67,   66,   45,   46,   68,   58,   93,   50,   51,   44,

       50,  183,   50,  183,   48,   45,   46,   46,   47,   72,
       73,   54,   67,   55,   46,   85,   46,   48,   74,   46,
       78,   49,   66,   46,   81,   46,   66,   79,   82,   89,
       49,   50,   46,   84,   80,   46,   46,   72,   73,   83,
       86,   87,   46,   46,   50,   51,   91,   88,   81,   46,
       94,   46,   46,   81,   96,   97,   46,   95,   89,   46,
       99,   46,   46,   83,   45,  125,  101,   46,   83,  102,
      103,   46,   46,   90,  104,   46,   48,  107,   46,  109,
       45,  126,   46,  115,  105,   46,   46,  118,  110,   45,
      182,  104,   48,  116,   46,   46,  123,   45,  183,  121,

       46,   48,   98,   50,  136,  120,   46,  119,  119,   48,
      183,   45,   46,  180,  151,  105,  111,   46,  124,   50,
      111,  119,   45,   48,   46,   46,   45,  134,   50,  112,
      142,  112,  149,  112,  114,  112,   50,  183,  114,  125,
      112,  125,  115,   46,  183,  183,  165,  183,   45,  137,
       50,  158,  168,   46,  128,  126,  183,  126,  128,   46,
       48,   50,  129,  120,   46,   50,  152,  179,   45,   45,
      139,  130,  116,   46,   46,  131,  159,   45,  128,  119,
       48,   48,  181,  183,  183,  127,  183,   50,  133,   48,
      169,   45,  160,  127,  112,  143,  112,  176,  112,   45,

      112,  126,  161,  114,  129,  112,  153,   50,   50,  126,
       45,   48,  159,   46,  183,  130,   50,  157,  162,  131,
      128,   45,   48,  141,  154,  145,  183,  183,  160,   45,
       50,   45,  133,   48,  176,  146,  175,   46,   50,  142,
      183,   48,  161,   48,  164,  170,  151,  167,   46,   50,
      183,  141,  183,  183,  166,  145,   46,   45,  162,  155,
       50,   45,  142,  183,  183,   45,  155,  142,   50,   48,
       50,  154,   45,   48,  163,  154,  146,   48,   46,  171,
       46,  168,  154,  173,   48,  177,  180,   45,  174,   46,
      178,  183,  182,  156,  153,  152,   50,  150,  148,   48,

       50,  143,  139,  135,   50,  122,  108,  100,   46,   70,
       68,   50,   68,   75,   46,   70,   46,   43,   41,  172,
       37,   65,   57,   56,   43,   41,   50,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   46,   37,  183,  183,  183,   46,   46,
      183,  183,   46,  183,   46,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   92,   92,
      106,  183,  183,  183,  106,  106,  106,  183,  183,  106,
      113,  183,  183,  113,  183,  113,  113,  183,  183,  113,

      117,  183,  183,  183,  117,  117,  117,  183,  183,  117,
      105,  183,  183,  183,  105,  183,  105,  105,  183,  105,
      112,  183,  183,  112,  183,  112,  112,  183,  183,  112,
      116,  183,  183,  183,  116,  183,  116,  116,  183,  116,
      132,  132,  183,  183,  183,  132,  132,  183,  132,  132,
      138,  138,  183,  183,  183,  138,  138,  183,  138,  138,
      140,  140,  183,  140,  140,  183,  183,  140,  144,  144,
      183,  144,  144,  183,  183,  144,  147,  183,  183,  183,
      147,  147,  147,  183,  183,  147,  139,  139,  139,  183,
      139,  139,  183,  183,  139,  143,  143,  183,  143,  143,

      183,  183,  143,  143,  146,  183,  183,  183,  146,  183,
      146,  146,  183,  146,    3,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183
    } ;

static const flex_int16_t yy_chk[666] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        7,    7,   17,   29,   18,   24,   29,   28,   17,   18,
       31,   24,   32,   28,   30,   30,   17,   31,  188,   32,
       17,   33,   34,   24,   17,   28,   39,   39,   33,   34,
       47,   61,   47,   17,   60,   49,   44,   49,   61,   51,
       49,   51,   44,   60,   51,   28,   84,   17,   17,   19,

       24,   24,   28,   28,   44,   19,   54,   84,   54,   57,
       57,   19,   67,   19,   49,   75,   58,   19,   58,   62,
       62,   19,   49,   63,   71,   75,   51,   63,   71,   79,
       19,   44,   64,   74,   64,   74,   67,   72,   72,   71,
       76,   77,   78,   76,   19,   19,   80,   78,   83,   77,
       85,   87,   86,   92,   87,   88,   80,   86,   89,   88,
       90,   85,   93,   83,   89,  125,   93,   79,   92,   94,
       95,   90,   94,   79,   96,   97,   89,   97,   95,   99,
       96,  125,   99,  102,   96,  100,   96,  103,  100,  102,
      181,  104,   96,  102,  103,  102,  109,  104,  105,  107,

      109,  102,   89,   89,  123,  106,  107,  104,  105,  104,
      105,  106,  123,  178,  151,  106,  111,  106,  110,   96,
      101,  106,  111,  106,  121,  110,  101,  121,  102,  101,
      151,  101,  136,  101,  111,  101,  104,  105,  101,  112,
      101,  114,  115,  136,  116,  112,  158,  114,  115,  124,
      106,  150,  165,  158,  116,  112,  116,  114,  115,  150,
      115,  111,  117,  120,  124,  101,  140,  173,  117,  120,
      140,  118,  117,  173,  117,  118,  152,  118,  117,  120,
      117,  120,  177,  116,  112,  113,  114,  115,  118,  118,
      165,  113,  152,  127,  113,  144,  113,  175,  113,  127,

      113,  113,  153,  113,  129,  113,  144,  117,  120,  127,
      129,  127,  159,  149,  146,  130,  118,  149,  153,  130,
      129,  130,  129,  132,  146,  134,  146,  132,  159,  132,
      113,  134,  130,  130,  171,  134,  170,  134,  127,  132,
      132,  132,  161,  134,  157,  166,  138,  164,  157,  129,
      138,  141,  138,  146,  163,  145,  171,  141,  161,  155,
      130,  145,  138,  138,  138,  155,  147,  141,  132,  141,
      134,  145,  147,  145,  156,  155,  147,  155,  147,  167,
      167,  168,  147,  169,  147,  172,  174,  168,  169,  169,
      172,  138,  179,  148,  143,  139,  141,  137,  135,  168,

      145,  133,  131,  122,  155,  108,   98,   91,  174,   69,
       68,  147,   66,   59,  179,   53,   46,   42,   40,  168,
       37,   35,   23,   21,   10,    8,  168,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  186,    5,    3,    0,    0,  186,  186,
        0,    0,  186,    0,  186,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  189,  189,
      190,    0,    0,    0,  190,  190,  190,    0,    0,  190,
      191,    0,    0,  191,    0,  191,  191,    0,    0,  191,

      192,    0,    0,    0,  192,  192,  192,    0,    0,  192,
      193,    0,    0,    0,  193,    0,  193,  193,    0,  193,
      194,    0,    0,  194,    0,  194,  194,    0,    0,  194,
      195,    0,    0,    0,  195,    0,  195,  195,    0,  195,
      196,  196,    0,    0,    0,  196,  196,    0,  196,  196,
      197,  197,    0,    0,    0,  197,  197,    0,  197,  197,
      198,  198,    0,  198,  198,    0,    0,  198,  199,  199,
        0,  199,  199,    0,    0,  199,  200,    0,    0,    0,
      200,  200,  200,    0,    0,  200,  201,  201,  201,    0,
      201,  201,    0,    0,  201,  202,  202,    0,  202,  202,

        0,    0,  202,  202,  203,    0,    0,    0,  203,    0,
      203,  203,    0,  203,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
/* ---------------------------------------------------------------------------
//
//      The ab-initio based multiscale library
//
//                  S / P H I / n X
//
//      Copyright:  Max-Planck-Institute for Iron Research
//                  40237 Duesseldorf, Germany
//
//      Contact:    https://sxlib.mpie.de
//      Authors:    see sphinx/AUTHORS
//      License:    see sphinx/LICENSE
//
// ---------------------------------------------------------------------------
// Compile with flex option -PSxParser_ ...
// --------------------------------------------------------------------------*/
#line 19 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
#include <string.h>
#include <stdio.h>
#include <SxSymbolTable.h>
#include <SxParser.tab.hpp>
#include <SxParser.h>
#include <SxUniqueList.h>
#include <SxConfig.h>
#include <SxFSAction.h>
#include <SxFileIO.h>
//#ifdef WITH_COM
//#  include <SxSSL.h>
//#endif /* WITH_COM */

#define SX_PARSER_MAX_INCLUDES     20
#define YY_ALWAYS_INTERACTIVE      1

// --- necessary variables
int SxParser_pos = 0;  // We don't use YY_USER_ACTION to avoid conflicts with
                       // yyless, unput, or similar commands, that modify the
                       // stream buffer.
int SxParser_lineNumber = 1;
bool SxParser_isNewBuffer = true; // overcome the corrupt yyleng after
                                  // swapping the buffer yyleng is corrupt
int  SxParser_newPos      = 0;    // use this in combination with
                                  // SxParser_isNewBuffer
bool SxParser_verbose = false;

SxList<SxString> SxParser_bufferStack;
SxList<int>      SxParser_startIdxStack;
SxList<int>      SxParser_endIdxStack;
SxList<int>      SxParser_lineNumberStack;
SxList<int>      SxParser_posStack;
SxList<SxString> SxParser_filenameStack;
SxList<SxString> SxParser_globalVars;
SxList<SxFile>   SxParser_nestedFiles;

SxMap<SxString,SxList<SxString> > SxParser_fileLookUp;
SxMap<SxString,SxList<SxString> > SxParser_includeLookUp;

SxUniqueList<SxString> SxParser_excludeGroups;

int  SxParser_groupLevel     = 0;
int  SxParser_includeLevel   = 0;
bool SxParser_validationMode = false;  // if true, variables are always local!

SxSymbol SxParser_Symbol;
SxList<SxSymbol> SxParser_symbolStack;
SxSymbol *tmpList=NULL;
SxString tmpString;
SxString SxParser_filename;
bool SxParser_Error = false;
bool SxParser_isParsing = false;
SxList<SxString> SxParser_path;

SxString SxParser_buffer;
char const *SxParser_bufPtr;

void SxParser_init ()
{
   // --- initParser
   SxParser_isParsing = false;
   SxParser_pos = 0;
   SxParser_lineNumber = 1;
   SxParser_isNewBuffer = true;
   SxParser_newPos = 0;
   SxParser_groupLevel   = 0;
   SxParser_includeLevel = 0;
   SxParser_validationMode = false;
   SxParser_bufferStack.removeAll ();
   SxParser_startIdxStack.removeAll ();
   SxParser_endIdxStack.removeAll ();
   SxParser_posStack.removeAll ();
   SxParser_filenameStack.removeAll ();
   SxParser_symbolStack.removeAll ();
   SxParser_globalVars.removeAll ();
   tmpList = NULL;
   SxParser_path.removeAll ();
   SxParser_fileLookUp.removeAll ();
   SxParser_includeLookUp.removeAll ();
}

// function for reading contents of a file (may be replaced when using MPI)
SxArray<char> (*SxParser_readFile)(const SxString &, int64_t) = SxFileIO::readBinary;

SxString SxParser_read (const SxString &filename)
{
   SxParser_includeLevel++;
   if (SxParser_includeLevel > SX_PARSER_MAX_INCLUDES)  {
      SxParser_error ("Maximal include count reached");
   }
   if (filename.getSize() > 5 && filename.subString(0,5) == "ssl://")  {
//#     ifdef WITH_COM
//         SxSSL ssl;
//         SxString cmdOut = ssl.get (filename);
//         return cmdOut + '\n';
//#     else
         cout << SX_SEPARATOR;
         cout << "| Error: Program was compiled without SSL support.\n";
         cout << SX_SEPARATOR;
         SX_QUIT;
         return SxString();
//#     endif /* WITH_COM */

   }  else  {

       SxFileInfo fileInfo(filename);
       if (!fileInfo.exists ())  {
          SxString msg = "File '" + filename + "' does not exist.";
          if (SxParser_filename == filename)  {
             cout << msg << endl;
             SX_QUIT;
          } else {
             SxParser_error (msg.ascii ());
          }
       }
       if (fileInfo.isDir ())  {
          SxString msg = "File '" + filename + "' is a directory ?!";
          if (SxParser_filename == filename)  {
             cout << msg << endl;
             SX_QUIT;
          } else {
             SxParser_error (msg.ascii ());
          }
       }
      SxString res;
      try {
         res = (*SxParser_readFile)(filename, -1);
      } catch (SxException e)  {
         if (SxParser_filename == filename)  {
            cout << e.getMessage() << endl;
            SX_QUIT;
         } else {
            SxParser_error (e.getMessage());
         }
      }
      return res + '\n'; // FIXME: newline not necessary?
   }
}

/** Don't use this function for parsing. Call SxParser_parseFile instead. */
int SxParser_parse ();

void SxParser_parseFile (const SxString &filename,
                         const SxString &path,
                         const SxUniqueList<SxString> &excludeGroups)
{
   if (SxParser_isParsing)  {
      sxprintf ("Internal Error: Parser is currently blocked.\n");
      SX_EXIT;
   }
   SxParser_isParsing      = true;
   SxParser_buffer         = SxParser_read (filename);
   SxParser_bufPtr         = SxParser_buffer.ascii();
   SxParser_filename       = filename;
   SxParser_includeLevel   = 0;
   SxParser_pos            = 0;
   SxParser_lineNumber     = 1;
   SxParser_isNewBuffer    = true;
   SxParser_validationMode = false;

   SxParser_excludeGroups = excludeGroups;

   char separator = ':';
   if (path != "")  {
#     ifdef WIN32
         separator = ';';
#     endif
      SxParser_path = SxString(path).tokenize(separator);
      SxParser_path.prepend (".");  // first look in current directory
   }
   SxParser_parse ();
   SxParser_isParsing      = false;
   if (SxParser_groupLevel != 0)  {
      cout << SX_SEPARATOR;
      cout << "| Error: Parse error at end of" << endl
           << "|    " << filename << endl
           << "| Missing closing '}'." << endl;
      cout << SX_SEPARATOR;
      SX_QUIT;
   }
}


SxList<SxString> SxParser_findInPath (const SxString &file,
                                      const SxList<SxString> &pathList_)
{
   if (SxParser_fileLookUp.containsKey(file))
      return SxParser_fileLookUp(file);

   SxList<SxString> pathList = pathList_;
#  ifdef WIN32
      pathList.prepend ("C:"); // consider absolute paths
#  else
      pathList.prepend ("/"); // consider absolute paths
#  endif /* WIN32 */
   pathList.prepend (".");  // but *first* look in cwd

   SxList<SxString> fullNames;

   SxString fullName;
   SxString searchPath;

   SxList<SxFileInfo> items;
   SxList<SxFileInfo>::Iterator infoIt;

   // --- search in path
   SxList<SxString>::ConstIterator it;
   int i=1;
   bool useWildCards = (file.contains("*") || file.contains("?"));
   for (it  = pathList.begin();
        it != pathList.end();
        it++, i++)
   {
//#     ifdef WIN32
//         fullName = *it + "/" + file;
//#     else
         fullName = *it + "/"  + file;
//#     endif /* WIN32 */
         try {
            if (useWildCards)  {
               items = SxFSAction::ls (fullName);
               for (infoIt = items.begin(); infoIt != items.end(); ++infoIt)  {
                  fullNames << infoIt->getAbsPath ();
               }
               if (items.getSize() > 0)  {
                  SxParser_fileLookUp(file) = fullNames;
                  return fullNames;
               }
            } else {
               if (SxFile(fullName).exists()) {
                  fullNames = SxList<SxString>() << fullName;
                  SxParser_fileLookUp(file) = fullNames;
                  return fullNames;
               }
            }
         } catch (SxException e)  { e.print (); SX_QUIT; }

         searchPath += "   " + SxString(i) + ": " + *it + "\n";
   }

   // --- is the file an absolute URI?
   try {
      if (useWildCards)  {
         items = SxFSAction::ls (file);
         for (infoIt = items.begin(); infoIt != items.end(); ++infoIt)  {
            fullNames << infoIt->getAbsPath ();
         }
//       if (items.getSize() > 0)  {
            SxParser_fileLookUp(file) = fullNames;
            return fullNames;
//       }
      } else {
         fullName = file;
         if (SxFile(fullName).exists()) {
            fullNames = SxList<SxString>() << fullName;
            SxParser_fileLookUp(file) = fullNames;
            return fullNames;
         }
      }
   } catch (SxException e)  { e.print (); SX_QUIT; }

   SxString msg;
   msg += "Search path:\n" + searchPath;
   msg += "File '" + file + "' not found";
   SxParser_error ( msg.ascii() );
   return SxList<SxString> ();
}

SxList<SxString> SxParser_findInPath (const SxString &file,
                                      const SxString &path)
{
   SxList<SxString> pathList;
   char separator = ':';
#  ifdef WIN32
      separator = ';';
#  endif
   pathList = SxString(path).tokenize(separator);
   return SxParser_findInPath (file, pathList);
}


SxList<SxString> SxParser_findInPath (const SxString &file)
{
   return SxParser_findInPath (file, SxParser_path);
}



#define YY_INPUT(buf,result,max_size)                                          \
{                                                                              \
/*  sxprintf ("BUFFER: >%s<\n\n",SxParser_bufPtr); */                          \
    if (SxParser_isNewBuffer)  {                                               \
       SxParser_isNewBuffer = false;                                           \
          SxParser_pos = SxParser_newPos;                                      \
    }                                                                          \
    char c;                                                                    \
    size_t idx=0;                                                              \
    while ( (c = *SxParser_bufPtr) != '\n' && c != '\0' && idx < max_size)  {  \
       buf[idx++] = *SxParser_bufPtr++;                                        \
    }                                                                          \
    if (c == '\n')  buf[idx++] = '\n';                                         \
    if (c == '\0' || idx >= max_size-1 )  {                                    \
       result = YY_NULL;                                                       \
    }  else  {                                                                 \
       buf[idx++] = '\0';                                                      \
       SxParser_bufPtr++;                                                      \
       if (SxParser_verbose)                                                   \
          sxprintf ("READ[%d]: %s", SxParser_lineNumber, buf);                 \
       result = idx;                                                           \
    }                                                                          \
}


// --- error handling
void SxParser_error (const SxString &name)
{
   if (SxString(name) == "parse error")  {
      sxprintf ("Syntax error in %s:%d.\n",
              SxParser_filename.ascii(),
              SxParser_lineNumber);
   }  else  {
      sxprintf ("%s in %s:%d.\n",
              name.ascii(),
              SxParser_filename.ascii(),
              SxParser_lineNumber);
   }
   SxParser_Error = true;
// SxSymbolTable::getGlobalPtr()->topLevel()->print();
   SX_EXIT;
}

void SxParser_include (const SxString &file)
{
// sxprintf ("including file %s\n", file.ascii());
   int startToken = SxParser_pos;  SxParser_pos += yyleng;
   int endToken   = SxParser_pos;
// sxprintf ("quotes: >%s<\n", SxString(SxParser_buffer).subString(startToken, endToken).ascii());
// sxprintf ("text: >%s<\n", SxParser_text);

   // --- push current buffer
   SxParser_startIdxStack.append   (startToken);
   SxParser_endIdxStack.append     (endToken);
   SxParser_bufferStack.append     (SxParser_buffer);
   SxParser_lineNumberStack.append (SxParser_lineNumber);
   SxParser_filenameStack.append   (SxParser_filename);
   SxParser_posStack.append        (SxParser_pos);

   // sxprintf ("file: >%s<\n", fileIt->ascii());
   // sxprintf ("diff: %d %d\n", fileIt->getSize(), endToken-startToken);

   SxParser_filename = file;
   SxParser_nestedFiles << file;

   // --- start parsing from a new file
   SxParser_buffer     = SxParser_read (file.ascii());
   SxParser_bufPtr     = SxParser_buffer.ascii();

   SxParser_pos = SxParser_newPos = 0;
   SxParser_isNewBuffer = true;
   SxParser_lineNumber = 1;

   YY_FLUSH_BUFFER;
}



void SxParser_handleInclude ()
{
   SxList<SxString> files;

   // --- retrieve filename
   SxString file = SxString(SxParser_text).right("include").stripWhiteSpace();
   if (!SxParser_includeLookUp.containsKey(file))  {
      char delimiter = file(0);
      // does a string contains the real filename?
      if ( delimiter != '"' && delimiter != '<' )  {
         // remove ';'
         file = file.subString (0, file.getSize()-2);
         if ( !SxSymbolTable::getGlobalPtr()->contains (file) )  {
            SxString msg;
            msg += "Undefined symbol '" + file + "'";
            SxParser_error ( msg.ascii() );
         }
         file = SxSymbolTable::getGlobalPtr()->get(file)->toString();
         delimiter = '\0';  // clean delimiter
         if (file(0) == '<')  {
            delimiter = '<';
            file = file.subString (1, file.getSize()-2);
         }
      }  else  {
         // remove '"' (or '<' and '>'), and ';'
         file = file.subString (1, file.getSize()-3);
      }
      if (delimiter == '<')  {
         files = SxParser_findInPath (file);
      } else {
         try {
            // --- try to resolve wildcards
            bool useWildCards = (file.contains("*") || file.contains("?"));
            if (useWildCards)  {
               SxList<SxFileInfo> items = SxFSAction::ls (file);
               SxList<SxFileInfo>::Iterator itemsIt;
               for (itemsIt = items.begin(); itemsIt != items.end(); ++itemsIt)  {
                  files << itemsIt->getAbsPath ();
               }
            }  else  {
               if (SxFile(file).exists()) {
                  files << file;
               } else {
                  SxString msg = "File '" + file + "' not found";
                  SxParser_error ( msg.ascii() );
               }
            }
         } catch (SxException e)  { e.print (); SX_QUIT; }
      }
      SxParser_includeLookUp(file) = files;
   }  else  {
      files = SxParser_includeLookUp(file);
   }

   SxList<SxString>::Iterator fileIt;
   for (fileIt = files.begin(); fileIt != files.end(); ++fileIt)  {
      SxParser_include (*fileIt);
      if (files.getSize() > 0)  yyleng = 0;    // only if wildcards were used
   }

   if (files.getSize() == 0)  { // e.g., wildcards with no match
      SxParser_pos += yyleng;
      yyleng = 0;
   }
}


// --- read string from file
SxString sxReadFile (const SxString &file)
{
   SxList<SxString> files = SxParser_findInPath (file);
   if (files.getSize() == 0)  {
      SxString msg;
      msg += "File '" + file + "' not found";
      SxParser_error ( msg.ascii() );
   }
   return SxFileIO::readLines (files.first());
}




// --- multiply used targets
//void SxParser_beginGroup ()  {   // {ID}{SPACE}"{"

//#define YY_NO_UNPUT  /* suppress warning */
#line 1381 "SxParser.lex.cpp"
#line 1382 "SxParser.lex.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 500 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"

#line 1601 "SxParser.lex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 184 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 615 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 501 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos += yyleng; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 502 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos+=yyleng;
                  SxParser_lineNumber++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 504 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos += yyleng;
                  SxSymbol sym;
                  sym.parserFilename = SxParser_filename;
                  sym.parserLineNumber = SxParser_lineNumber;
                  sym.val = atof(SxParser_text);
                  sym.type = VAR;
                  SxParser_symbolStack.prepend (sym);
                  SxParser_lval.sym = &SxParser_symbolStack.first ();
                  return NUM; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 513 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{
                  SxParser_pos += yyleng;
                  size_t len = strlen (SxParser_text);
                  // --- remove '{' from buffer
                  for (size_t i=0; i < len; i++)
                     if (SxParser_text[i]=='{') SxParser_text[i]=' ';

                  char *buffer = new char [strlen(SxParser_text)];
                  sscanf (SxParser_text, "%s", buffer);

                  if (   SxParser_excludeGroups.getSize () > 0
                      && SxParser_excludeGroups.contains (buffer))
                  {
                     // --- skip this group as if it is a comment
                     //     "Max length is the size of flex token which is
                     //     limited to the size of input buffer, typically 16K.
                     // Flex & Bison: Text Processing Tools, Levine, 2009, p 40"
                     int c;
                     int excludeLevel = 0;

                     for (;;)  {
                        c = yyinput();
                        if (c == EOF) { break; }
                        else if (c == '\n') SxParser_lineNumber++;
                        else if (c == '{') { excludeLevel++; SxParser_pos++; }
                        else if (c == '}') {
                           excludeLevel--;
                           SxParser_pos++;
                           if (excludeLevel < 0)  {
                              break;
                           }
                        }  else SxParser_pos++;
                     }
                  }  else  {
                     // --- create new symbol table layer
                     //     (will be deleted in destructor of global table)
                     SxParser_groupLevel++;
                     SxSymbolTable::getGlobalPtr() = new SxSymbolTable (SxSymbolTable::getGlobalPtr(), buffer);
                     SxSymbolTable::getGlobalPtr()->parserFilename = SxParser_filename;
                     SxSymbolTable::getGlobalPtr()->parserLineNumber = SxParser_lineNumber;
                  }
                  delete [] buffer; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 555 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos += yyleng;
//                  sxprintf ("NEWLINES: %d\n", SxString(SxParser_text).contains('\n'));
                  size_t len = strlen (SxParser_text);
                  // --- remove '(' from buffer
                  for (size_t i=0; i < len; i++)
                     if (SxParser_text[i]=='(') SxParser_text[i]='\0';

                  char *buffer = new char [strlen (SxParser_text)+1];
                  sscanf (SxParser_text, "%s", buffer);
                  unput ('('); SxParser_pos--; // we need '(' for yacc
                  SxSymbol *ptr = SxSymbolTable::getGlobalPtr()->get (buffer, false, false);
                  if ( ptr )  {
                     if (ptr->type != FUNC && ptr->type != STRFUNC)  {
                        SxParser_error ("Found a symbol where a function was expected");
                     }
                     SxSymbol sym (*ptr);
                     SxParser_symbolStack.prepend (sym);
                     SxParser_lval.sym = &SxParser_symbolStack.first();
                  }  else  {
                     sxprintf ("FUNCTION: %s not found\n", buffer);
                     SxParser_error ("Invalid statement\n");
                  }
                  delete [] buffer;
                  return ptr->type;  // FUNC or STRFUNC
                }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 580 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_groupLevel--;
                  SxParser_pos++;
                  SxSymbolTable::getGlobalPtr() = SxSymbolTable::getGlobalPtr()->parent;
                  if (!SxSymbolTable::getGlobalPtr() ) SxParser_error ("Unexpected '}'\n"); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 584 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos++; return '+'; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 585 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos++; return '-'; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 586 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos++; return '*'; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 587 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos++; return '/'; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 588 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos++; return '^'; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 589 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos++; return '('; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 590 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos++; return ')'; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 591 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos++;
                  dimension++;
                  SxSymbol sym, emptyList ("emptyList", 0.);
                  sym.valList->prepend (emptyList);
                  sym.parserFilename = SxParser_filename;
                  sym.parserLineNumber = SxParser_lineNumber;
                  sym.type = LIST;
                  sym.name = "list";
                  SxParser_symbolStack.prepend (sym);
                  SxParser_lval.sym = &SxParser_symbolStack.first ();
                  //if (dimension > 2)  SxParser_error ("Tensors not allowed");
                  //printStack ();
                  return '['; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 604 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos++; return ']'; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 605 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos++; return '='; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 606 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos++; return ','; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 607 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos++; return ';'; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 608 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos += yyleng;
                  SxString name = SxString(SxParser_text).left('=').trim();
                  SxSymbol *sym = SxSymbolTable::getGlobalPtr()->get(name,
                                                   true,
                                                   false);

                  // --- allow overwriting
                  SxSymbolTable::getGlobalPtr()->remove (sym);

                  if (SxParser_globalVars.contains(name))
                     sym = SxSymbolTable::getGlobalPtr()->topLevel()->append (name);
                  else
                     sym = SxSymbolTable::getGlobalPtr()->append (name);

                  sym->parserFilename = SxParser_filename;
                  sym->parserLineNumber = SxParser_lineNumber;
                  sym->val = -1;
                  sym->initialized = false;
                  SxParser_lval.sym = sym;
                  unput ('='); SxParser_pos--;
                  return sym->type; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 629 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos += yyleng;
                  SxSymbol *sym = SxSymbolTable::getGlobalPtr()->get(SxParser_text,
                                                   SxParser_validationMode,
                                                   false);
                  if (sym)  {
                     SxParser_lval.sym = sym;
                     //printf ("VARIABLE:"); sym->print();
                     return VAR;
                  }

                  if (SxParser_globalVars.contains(SxParser_text))
                     sym = SxSymbolTable::getGlobalPtr()->topLevel()->append (SxParser_text);
                  else
                     sym = SxSymbolTable::getGlobalPtr()->append (SxParser_text);

                  sym->parserFilename = SxParser_filename;
                  sym->parserLineNumber = SxParser_lineNumber;
                  sym->setDefined (false);
                  sym->val = -1;
                  sym->initialized = false;
                  SxParser_lval.sym = sym;
                  return sym->type; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 651 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ // strings
                  SxParser_pos += yyleng;
                  int i=0, length = 1024;
                  char *buffer = new char [length];
                  int c, cPrev;
                  tmpString = "";
                  buffer[0] = '\0';
                  cPrev = '\0';
                  // support quoting '\"'
                  while ( ((c = yyinput()) != '"' || cPrev == '\\')
                         && c != EOF)
                  {
                     SxParser_pos++;
//                   if ( c != '\\')  {
                        buffer[i++] = char(c); buffer[i] = '\0';
//                   }
                     if ( i == length-1 )  {
                        tmpString += buffer; i=0; buffer[0] = '\0';
                     }
                     if (c == '\n')  SxParser_pos--;
                     cPrev = c;
                  }
                  SxParser_pos++;
                  if ( c == EOF )  {
                     SxParser_error ("Unexpected end of file." );
                  }

                  tmpString += buffer;
                  // unquote quotes
                  tmpString  = tmpString.substitute ("\\\"", "\"");
                  delete [] buffer;
                  SxSymbol sym;
                  sym.parserFilename = SxParser_filename;
                  sym.parserLineNumber = SxParser_lineNumber;
                  sym.str  = tmpString;
                  sym.type = STR;
                  SxParser_symbolStack.prepend (sym);
                  SxParser_lval.sym = &SxParser_symbolStack.first ();
                  return STR;
                }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 691 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ // strings with search pathes, like  <string>
                  SxParser_pos += yyleng;
                  int i=0, length = 1024;
                  char *buffer = new char [length];
                  int c;
                  tmpString = "";
                  buffer[0] = '\0';
                  while ( (c = yyinput()) != '>' && c != EOF)  {
                     SxParser_pos++;
                     buffer[i++] = char(c); buffer[i] = '\0';
                     if ( i == length-1 )  {
                        tmpString += buffer; i=0; buffer[0] = '\0';
                     }
                     if (c == '\n')  SxParser_pos--;
                  }
                  SxParser_pos++;
                  if ( c == EOF )  { SxParser_error ("Unexpected end of file." ); }

                  tmpString += buffer;
                  delete [] buffer;
                  SxSymbol sym;
                  sym.parserFilename = SxParser_filename;
                  sym.parserLineNumber = SxParser_lineNumber;
                  sym.str  = SxParser_findInPath (tmpString)(0);
                  sym.type = STR;
                  SxParser_symbolStack.prepend (sym);
                  SxParser_lval.sym = &SxParser_symbolStack.first ();
                  return STR;
                }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 720 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ // HERE documents
                  int nr = SxParser_lineNumber;

                  SxParser_pos += yyleng;
                  SxParser_lineNumber++;

                  SxString text = SxParser_text;
                  char endToken = text.contains (';') ? ';' : '\n';

                  SxString hereExtID = text.right("<<").left(endToken);
                  SxString hereID = hereExtID.left('#');
                  if (hereID == "")  hereID = hereExtID;

                  SxList<SxString> hereBuffer;
                  char c = '\0';
                  for (;;) {
                     SxList<char> lineBuffer;
                     while ( (c = yyinput()) != '\n' && c != EOF)  {
                        SxParser_pos++;
                        if (c == '\0') continue;
                        lineBuffer << c;
                     }

                     if ( c == EOF )  {
                        SxString msg;
                        msg  = "HERE document has no termination ";
                        msg += "(opened in line ";
                        msg += SxString(nr) + ", identified by '" + hereID + "'";
                        msg += ").\n";
                        msg += "Unexpected end of file.\n";
                        SxParser_error( msg.ascii() );
                        break;
                     }

                     SxString line = SxString (lineBuffer);
                     ssize_t pos = line.findLast (hereID);
                     if (pos >= 0 && line.getSize() == hereID.getSize() - pos)  { // end of HERE document found
                        SxParser_lineNumber += 2;
                        break;
                     }
                     hereBuffer << line;
                  }
                  unput (';');  //SxParser_pos--; // fake final ';' in statement

                  SxParser_lineNumber += hereBuffer.getSize();


                  SxSymbol sym;
                  sym.parserFilename = SxParser_filename;
                  sym.parserLineNumber = SxParser_lineNumber;
                  sym.str  = SxString::join (hereBuffer, '\n');
                  sym.type = STR;
                  sym.binary = true;
                  SxParser_symbolStack.prepend (sym);
                  SxParser_lval.sym = &SxParser_symbolStack.first ();
                  return STR;
                }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 777 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ // eat up C comments
                  //SxParser_pos += yyleng;
                  int c, cNext;
                  int nr = SxParser_lineNumber;
                  SxParser_pos++;  // '/'
                  SxParser_pos++;  // '*'

                  cNext = yyinput();
                  for (;;) {
                     c = cNext;
                     cNext = yyinput();
                     while ( !(c == '*' && cNext == '/') && c != EOF)  {
                        // eat up text of comment
                        if ( c == '\n' )  SxParser_lineNumber++;
                        else              SxParser_pos++;
                        c     = cNext;
                        cNext = yyinput();
                     }

                     if ( c == EOF )  {
                        SxString msg;
                        msg  = "Comment block (/* ... */) has no termination ";
                        msg += "(opened in line ";
                        msg += nr;
                        msg += ").\n";
                        msg += "Unexpected end of file.\n";
                        SxParser_error( msg.ascii() );
                        break;
                     }
                     break;
                  }
                  SxParser_pos++;   // '*'
                  SxParser_pos++;   // '/'
                }
	YY_BREAK
case 25:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 811 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ // eat up C++ comments
                  SxParser_pos += yyleng;
                }
	YY_BREAK
case 26:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 814 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ // eat up shell comments
                  SxParser_pos += yyleng;
                }
	YY_BREAK
case 27:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 817 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ // eat up Fortran90 comments
                  SxParser_pos += yyleng;
                }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 820 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ // eat up terminator characters '\0'
                }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 822 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ // validation file
                  SxString str  = SxString(SxParser_text).right("format").trim();
                  str = str.left (";");
                  // --- use only the first occurance of FORMAT,
                  //     neglect any further FORMATs
                  if (!SxSymbolTable::getGlobalPtr()->topLevel()->contains("validator"))  {
                     str = "std/"+str+".std";
                     SxSymbol *sym = SxSymbolTable::getGlobalPtr()->topLevel()->append ("validator");
                     sym->type = STR; sym->str = str;
                     sym->parserFilename = SxParser_filename;
                     sym->parserLineNumber = SxParser_lineNumber;
                  }
                  SxParser_pos += yyleng; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 835 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ // switch to validation mode (all vars are treated locally)
                  SxParser_validationMode = true;
                  SxParser_pos += yyleng; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 838 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ // --- retrieve variable name
                  SxString vars = SxString(SxParser_text).right("needs")
                                  .removeWhiteSpace();
                  vars = vars.left (";");

                  SxList<SxString> neededVars = vars.tokenize(',');
                  SxList<SxString>::Iterator it;
                  for (it  = neededVars.begin();
                       it != neededVars.end();
                       it++)
                  {
                     // --- check if variable has been defined already
                     if ( !SxSymbolTable::getGlobalPtr()->contains (*it) )  {
                        SxString msg;
                        msg += "Variable '" + *it + "' is undefined";
                        SxParser_error ( msg.ascii() );
                     }
                  }
                  SxParser_pos += yyleng; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 857 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ // --- retrieve variable name
                  SxString vars = SxString(SxParser_text).right("requires")
                                                         .removeWhiteSpace();
                  vars = vars.left (";");

                  SxList<SxString> neededVars = vars.tokenize(',');
                  SxList<SxString>::Iterator it;
                  for (it  = neededVars.begin();
                       it != neededVars.end();
                       it++)
                  {
                     // --- check if variable has been defined already
                     if ( !SxSymbolTable::getGlobalPtr()->contains (*it) )  {
                        SxString msg;
                        msg += "Variable '" + *it + "' is undefined";
                        SxParser_error ( msg.ascii() );
                     }
                  }
                  SxParser_pos += yyleng; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 876 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxString newGlobals;
                  newGlobals = SxString(SxParser_text).right("global")
                               .removeWhiteSpace();
                  newGlobals = newGlobals.left (";");
                  ssize_t n = newGlobals.getSize();
                  if (n > 1)  {
                     SxParser_globalVars << newGlobals.tokenize (',');
                  }  else  {
                     SxParser_error ("missing list of global variables");
                  }
                  SxParser_pos += yyleng; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 887 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_handleInclude (); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 888 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_handleInclude (); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 889 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_handleInclude (); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 890 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos += yyleng; SxParser_verbose = true;   }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 891 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_pos += yyleng; SxParser_verbose = false;  }
	YY_BREAK
case 39:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 892 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ yyterminate(); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 893 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{ SxParser_includeLevel--;
                  SxParser_globalVars.removeAll ();
                  if (SxParser_bufferStack.getSize() == 0)  {

                     yyterminate ();

                  }  else  {

                     SxString left, right, popBuffer;
                     int startToken, endToken;

                     // --- continue parsing of previous buffer
                     popBuffer  = SxParser_bufferStack.last ();
                     startToken = SxParser_startIdxStack.last ();
                     endToken   = SxParser_endIdxStack.last ();

                     // --- retrieve the current position
                     SxParser_lineNumber = SxParser_lineNumberStack.last ();
                     SxParser_filename = SxParser_filenameStack.last ();
                     SxParser_newPos = SxParser_pos = SxParser_posStack.last();

                     // --- delete the entries needed previously
                     SxParser_bufferStack.removeLast ();
                     SxParser_startIdxStack.removeLast ();
                     SxParser_endIdxStack.removeLast ();
                     SxParser_lineNumberStack.removeLast ();
                     SxParser_filenameStack.removeLast ();
                     SxParser_posStack.removeLast ();

                     // --- concatenate resulting buffer
                     ssize_t size   = popBuffer.getSize ();
                     if (startToken > 0)
                        left = popBuffer.subString(0, startToken-1);
                     if (endToken < size-1)
                        right = popBuffer.subString (endToken, size-1);

                     // --- the last buffer has an additional '\n'
                     //     (otherwise one could comment out statements in the
                     //      current buffer)
                     ssize_t offset = SxParser_buffer.getSize();
                     SxParser_buffer = left + SxParser_buffer + " " + right;
                     SxParser_bufPtr = SxParser_buffer.ascii()
                                     + startToken + offset;
                     SxParser_newPos = startToken + int(offset);
                     SxParser_pos    += int(offset)-1;
                     SxParser_isNewBuffer = true;
                  }
                }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 941 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
{
                    char errormsg[1024];
                    int c = *SxParser_text;

                    if (c < 32)  {
                       int idx = sprintf(errormsg, "Illegal character 0x%x "
                                         "(maybe unicode?) at '%c",
                                         (unsigned char)c,c);
                       // --- copy next 10 characters of the line
                       bool lineContinues;
                       for (int i = 0; i < 10; ++i)  {
                          c = yyinput ();
                          if ((lineContinues = (c != EOF && c != '\n')))
                             errormsg[idx++] = char(c);
                          else
                             break;
                       }
                       if (lineContinues)  {
                          // add "..."
                          for (int i = 0; i < 3; ++i) errormsg[idx++]='.';
                       }
                       errormsg[idx++]='\'';
                       errormsg[idx]=0;
                    } else {
                       sprintf(errormsg, "Illegal character '%c'", c);
                    }
                    SxParser_error (errormsg);
                }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 969 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"
ECHO;
	YY_BREAK
#line 2308 "SxParser.lex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 50);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 184 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 50;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 184 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 183);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 969 "/home/freysoldt/devel/sphinx/sxaccelerate/src/io/SxParser.lpp"


int SxParser_wrap () { return 1; }

